generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_name String      @id @db.VarChar(15)
  questions     questions[]
}

model cosmetics {
  cosmetic_id    Int              @id @default(autoincrement())
  cname          String           @db.VarChar(50)
  price          Int
  user_cosmetics user_cosmetics[]
  users          users[]
}

model friends {
  nickname_1                      String @db.VarChar(20)
  nickname_2                      String @db.VarChar(20)
  users_friends_nickname_1Tousers users  @relation("friends_nickname_1Tousers", fields: [nickname_1], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  users_friends_nickname_2Tousers users  @relation("friends_nickname_2Tousers", fields: [nickname_2], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([nickname_1, nickname_2])
}

model individual_game {
  game_id              Int      @id @default(autoincrement())
  finished             Boolean  @default(false)
  difficulty           String   @db.VarChar(6)
  correct_answers      Int      @default(0)
  total_answers        Int      @default(0)
  art_enable           Boolean? @default(true)
  geography_enable     Boolean? @default(true)
  history_enable       Boolean? @default(true)
  sports_enable        Boolean? @default(true)
  entertainment_enable Boolean? @default(true)
  science_enable       Boolean? @default(true)
  nickname             String?  @db.VarChar(20)
  users                users?   @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
}

model private_game {
  game_id             Int                   @id @default(autoincrement())
  finished            Boolean               @default(false)
  winner              String?               @db.VarChar(20)
  difficulty          String                @db.VarChar(6)
  wildcards_enable    Boolean               @default(true)
  answer_time         Int                   @default(15)
  pairing             Boolean               @default(true)
  users               users?                @relation(fields: [winner], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  private_games_state private_games_state[]
  user_private_games  user_private_games[]
}

model private_games_state {
  game_id             Int
  nickname            String         @db.VarChar(20)
  position            Int            @default(0)
  sports_token        Boolean        @default(false)
  science_token       Boolean        @default(false)
  entertainment_token Boolean        @default(false)
  history_token       Boolean        @default(false)
  art_token           Boolean        @default(false)
  geography_token     Boolean        @default(false)
  private_game        private_game   @relation(fields: [game_id], references: [game_id], onDelete: Cascade, onUpdate: NoAction)
  users               users          @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  private_chat        private_chat[]

  @@id([game_id, nickname])
}

model public_game {
  game_id            Int                  @id @default(autoincrement())
  finished           Boolean              @default(false)
  pairing            Boolean              @default(true)
  winner             String?              @db.VarChar(20)
  users              users?               @relation(fields: [winner], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  public_games_state public_games_state[]
  user_public_games  user_public_games[]
}

model public_games_state {
  game_id             Int
  nickname            String        @db.VarChar(20)
  position            Int           @default(0)
  sports_token        Boolean       @default(false)
  science_token       Boolean       @default(false)
  entertainment_token Boolean       @default(false)
  history_token       Boolean       @default(false)
  art_token           Boolean       @default(false)
  geography_token     Boolean       @default(false)
  public_game         public_game   @relation(fields: [game_id], references: [game_id], onDelete: Cascade, onUpdate: NoAction)
  users               users         @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  public_chat         public_chat[]

  @@id([game_id, nickname])
}

model questions {
  question_id    Int        @id @default(autoincrement())
  category_name  String     @db.VarChar(15)
  question       String     @db.VarChar(200)
  difficulty     String     @db.VarChar(6)
  correct_answer String     @db.VarChar(100)
  wrong_answer_1 String     @db.VarChar(100)
  wrong_answer_2 String     @db.VarChar(100)
  wrong_answer_3 String     @db.VarChar(100)
  accepted       Boolean
  nickname       String?    @db.VarChar(20)
  categories     categories @relation(fields: [category_name], references: [category_name], onDelete: Cascade, onUpdate: NoAction)
}

model user_cosmetics {
  cosmetic_id Int
  nickname    String    @db.VarChar(20)
  cosmetics   cosmetics @relation(fields: [cosmetic_id], references: [cosmetic_id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([cosmetic_id, nickname])
}

model user_private_games {
  game_id         Int
  nickname        String       @db.VarChar(20)
  correct_answers Int          @default(0)
  total_answers   Int          @default(0)
  private_game    private_game @relation(fields: [game_id], references: [game_id], onDelete: Cascade, onUpdate: NoAction)
  users           users        @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([game_id, nickname])
}

model user_public_games {
  game_id         Int
  nickname        String      @db.VarChar(20)
  correct_answers Int         @default(0)
  total_answers   Int         @default(0)
  public_game     public_game @relation(fields: [game_id], references: [game_id], onDelete: Cascade, onUpdate: NoAction)
  users           users       @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([game_id, nickname])
}

model user_wildcards {
  wildcard_id Int
  nickname    String    @db.VarChar(20)
  cuantity    Int       @default(3)
  users       users     @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  wildcards   wildcards @relation(fields: [wildcard_id], references: [wildcard_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([wildcard_id, nickname])
}

model users {
  nickname                          String                @id @db.VarChar(20)
  email                             String                @db.VarChar(50)
  password                          String                @db.VarChar(100)
  wallet                            Int                   @default(300)
  actual_cosmetic                   Int                   @default(1)
  cosmetics                         cosmetics             @relation(fields: [actual_cosmetic], references: [cosmetic_id], onDelete: Cascade, onUpdate: NoAction)
  friends_friends_nickname_1Tousers friends[]             @relation("friends_nickname_1Tousers")
  friends_friends_nickname_2Tousers friends[]             @relation("friends_nickname_2Tousers")
  individual_game                   individual_game[]
  private_game                      private_game[]
  private_games_state               private_games_state[]
  public_game                       public_game[]
  public_games_state                public_games_state[]
  user_cosmetics                    user_cosmetics[]
  user_private_games                user_private_games[]
  user_public_games                 user_public_games[]
  user_wildcards                    user_wildcards[]
}

model wildcards {
  wildcard_id    Int              @id @default(autoincrement())
  wname          String           @db.VarChar(50)
  price          Int
  description    String           @db.VarChar(500)
  user_wildcards user_wildcards[]
}

model private_chat {
  message_id          Int                  @id @default(autoincrement())
  game_id             Int?
  nickname            String?              @db.VarChar(20)
  message             String?              @db.VarChar(150)
  private_games_state private_games_state? @relation(fields: [game_id, nickname], references: [game_id, nickname], onDelete: Cascade, onUpdate: NoAction)
}

model public_chat {
  message_id         Int                 @id @default(autoincrement())
  game_id            Int?
  nickname           String?             @db.VarChar(20)
  message            String?             @db.VarChar(150)
  public_games_state public_games_state? @relation(fields: [game_id, nickname], references: [game_id, nickname], onDelete: Cascade, onUpdate: NoAction)
}
