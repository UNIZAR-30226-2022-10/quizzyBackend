openapi: "3.0.0"
info:
  description: "REST API for the Quizzy multiplatform application"
  version: "1.0.0"
  title: "Quizzy REST API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "795306@unizar.es"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MITl"
tags:
- name: "user"
  description: "User and account management operations"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Register a new user"
      description: "If there is any user with the same nickname, this operation will fail. Otherwise, a new entry in the user database will be created."
      operationId: "registerUser"
      requestBody:
        $ref: "#/components/requestBodies/UserCredentials"
        
      responses:
        "201":
          description: "user registered successfully"
          content:
            application/json:
              schema: 
                type: "string"
        "409":
          description: "conflict: user already exists"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system."
      description: "If the provided credentials were right, a new session will be opened for this user. Otherwise, this operation will fail."
      requestBody:
        description: "The new user's nickname"
        $ref: "#/components/requestBodies/UserCredentials"
      responses:
        "201":
          description: "user logged in successfully"
          content:
            application/json:
              schema:
                type: "string"
        "409":
          description: "unauthorized: credentials do not match"
  /user/logout:
    post:
      tags:
        - "user"
      summary: "Logs out the current logged in user session"
      requestBody:
        description: "The new user's nickname"
        $ref: "#/components/requestBodies/UserCredentials"
      responses:
        "201":
          description: "user logged in successfully"
          content:
            application/json:
              schema: 
                type: "string"
        "409":
          description: "unauthorized: credentials do not match"
  /user/{nickname}:
    get:
      tags:
      - "user"
      summary: "Find user by nickname"
      description: > 
        Fetch a user by its nickname. If it exists, the operations returns an User
        object with the desired user's information. Otherwise, the operation fails.
      operationId: "getUserByName"

      parameters:
      - name: "nickname"
        in: "path"
        description: "The nickname of the user that will be fetched."
        required: true
        schema: 
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
    put:
      tags:
      - "user"
      summary: "Modify user"
      description: >
        Modifies a user's information.
        
        **The user must be logged in, in order to modify its information.** If 
        the user isn't logged in as the user which is going to be modified, 
        the operation fails.
        
        If the user exists and the provided credentials 
        are correct, the user information will be updated.
      parameters:
      - name: "nickname"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        $ref: "#/components/requestBodies/UserCredentials"
        
      responses:
        "200":
          description: "Successful operation"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "404":
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: >
        Deletes a user account and related information.
        
        **The user must be logged in, in order to delete its account.** If 
        the user isn't logged in as the user which is going to be deleted, 
        the operation fails.
        
        If the user exists and the provided credentials 
        are correct, the user account will be deleted from the database.
      parameters:
      - name: "nickname"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        $ref: "#/components/requestBodies/UserCredentials"
      responses:
        "200":
          description: "Successful operation"
  /user/{nickname}/friends:
    get:
      tags: 
      - "user"
      - "friends"
      summary: "Get any user's friends"
      description: >
        Gather the user's friend list. If the user doesn't exist, the operation fails.
        Otherwise, the operation will return a list with the user's friends' nicknames.
      parameters:
      - name: "nickname"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
    post:
      tags: 
      - "user"
      - "friends"
      summary: "Add a new friend"
      description: >
        Adds a new user to the friend list by its nickname. The operation will 
        fail if the user doesn't exist or if they are already friends with each other.
      parameters:
      - name: "nickname"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                nickname:
                  type: "string"
        description: "The nickname of the user that will be added to the friend list."
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "not found: User not found"
    delete:
      tags: 
      - "user"
      - "friends"
      summary: "Remove friend from the list"
      description: >
        Removes friend from the list. The operation will fail if 
        the user doesn't exist or if they aren't friends with each other.
        
        **Note:** The user who removed his friend will also be removed from 
        his/her old friend's list.
      parameters:
      - name: "nickname"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "not found: User not found"
  /user/{nickname}/achievements:
    get:
      tags:
      - "user"
      - "achievements"
      summary: "Get user's achievements"
      description: >
        Get user's acquired achievements as an array of identifiers. 
        The user must be logged in, otherwise the operation will fail.
      parameters: 
      - name: "nickname"
        in: "path"
        required: true
        schema: 
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "uint64"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "404":
          $ref: "#/components/responses/404NotFound"
  /user/{nickname}/inventory:
    get:
      tags:
      - "user"
      - "inventory"
      summary: "Get user's inventory"
      description: >
        Get user's acquired inventory. The user must be logged in, otherwise
        the operation will fail.
      parameters: 
      - name: "nickname"
        in: "path"
        required: true
        schema: 
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "uint64"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "404":
          $ref: "#/components/responses/404NotFound"
  /questions:
    get:
      tags:
      - "questions"
      summary: "Get random questions from database"
      description: >
        Get random questions from the database. 
        Filter questions by adjusting the body parameters.
      parameters:
      - $ref: "#/components/parameters/limitParam"
      requestBody:
        $ref: "#/components/requestBodies/QuestionFilter"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/401Unauthorized"
  /questions/review:
    put:
      tags:
      - "questions"
      summary: "Add new question to database"
      description: >
        Adds a new question to the database. This operation will only work if 
        the user has administration privileges.
      parameters:
      - name: "id"
        in: "query"
        required: true
        description: "The id of the question to delete."
        schema:
          type: "integer"
          format: "uint64"
      responses:
        "201":
          description: "created: Question added succesfully"
    delete:
      tags: 
      - "questions"
      summary: "Delete question from database"
      description: >
        Deletes a question from the database. This operation will only work if 
        the user has administration privileges.
      parameters:
      - name: "id"
        in: "query"
        required: true
        description: "The id of the question to delete."
        schema:
          type: "integer"
          format: "uint64"
      responses:
        "201":
          description: "created: Question deleted succesfully"
        "404":
          $ref: "#/components/responses/404NotFound"
          
  /questions/proposal:
    post:
      tags:
      - "questions"
      summary: "Send a question for review"
      description: >
        Sends a review to the moderation service in order to review
        the question. The user must be logged in in order to suggest questions.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        "201":
          description: "created: Question proposal sent succesfully"
        "401":
          $ref: "#/components/responses/401Unauthorized"

  /shop:
    get:
      tags:
      - "shop"
      summary: "Get shop articles"
      description: >
        Get articles from shop by pages. Each article will have a price
        and a flag indicating whether the current user has this product
        or not. 
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ShopCosmetic"
        "400":
          $ref: "#/components/responses/400BadRequest"
    post:
      tags:
      - "shop"
      summary: "Buy an article from the shop."
      description: >
        Buy an item from the shop. This operation will fail if the user
        isn't logged in.

        The operation will return an object with a flag indicating if the purchase
        was successful or not, and a message with the operation's outcome description.

        ```ok = true```

        - **Purchased 'itemName'**: The item was succesfully added to the user's inventory
        and the price in coins was subtracted from his/her account. 
        
        
        ```ok = false```

        - **You don't have enough coins!**: The user doesn't have enough coins to buy the item.

        - **You already have that item!**: The user has enough coins to buy that item but it is
        already in his/her inventory.
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                itemId:
                  type: "integer"
                  format: "uint64"
                amount:
                  type: "integer"
                  format: "uint64"
                  default: 1


      responses:
        "200":
          description: "success" 
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  msg:
                    type: "string"
        "400":
          $ref: "#/components/responses/400BadRequest"
components:
  schemas:
    User:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "uint64"
        nickname:
          type: "string"
          description: "Nickname"
        email:
          type: "string"
          description: "Email"
        password:
          type: "string"
          description: "Encrypted password"
        wallet:
          type: "integer"
          format: "uint64"
          description: "Coin amount in wallet"
        publicWins:
          type: "integer"
          format: "uint64"
        privateWins:
          type: "integer"
          format: "uint64"
        cosmeticId:
          type: "integer"
          format: "uint64"
    Question:
      type: "object"
      properties:
        questionId: 
          type: "integer"
          format: "uint64"
        category:
          $ref: "#/components/schemas/Category"
        statement:
          type: "string"
        correctAnswer:
          type: "string"
        wrongAnswer1:
          type: "string"
        wrongAnswer2:
          type: "string"
        wrongAnswer3:
          type: "string"
    Category:
      type: "string"
      enum:
        - "Entertainment"
        - "Geography"
        - "History"
        - "Sports"
        - "Art and Literature"
        - "Science and technology"
    Difficulty:
      type: "string"
      enum:
        - "Easy"
        - "Medium"
        - "Hard"
    ShopCosmetic:
      type: "object"
      properties:
        cosmeticId:
          type: "integer"
          format: "uint64"
        cosmeticName:
          type: "string"
          format: "uint64"
        cosmeticPrice:
          type: "number"
          format: "float"
    ShopWildcard:
      type: "object"
      properties:
        wildcardId:
          type: "integer"
          format: "uint64"
        wildCardName:
          type: "string"
          format: "uint64"
        wildCardPrice:
          type: "number"
          format: "float"
    Achievement:
      type: "object"
      properties:
        achievementId:
          type: "integer"
          format: "uint64"
  requestBodies:
    UserCredentials:
      content:
        application/json:
          schema:
            type: "object"
            properties:
              nickname:
                type: "string"
                description: "Nickname"
              email:
                type: "string"
                description: "Email"
              password:
                type: "string"
                description: "Encrypted password"
            required:
            - "nickname"
            - "password"
    QuestionFilter:
      content:
        application/json:
          schema:
            type: "object"
            properties:
              difficulty:
                description: "Difficulty of the questions to be retrieved"
                allOf:
                - $ref: "#/components/schemas/Difficulty"
              category:
                description: "Category of the questions to be retrieved"
                allOf:
                - $ref: "#/components/schemas/Category"
            required:
              - "number"
  parameters:
    offsetParam:      # Can be referenced via '#/components/parameters/offsetParam'
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:       # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
  responses:
    400BadRequest:
      description: Invalid request.
    401Unauthorized:
      description: Access token is missing or invalid.
    404NotFound:
      description: The specified resource was not found.
    409Conflict:
      description: Conflict with an existing entity in the database.