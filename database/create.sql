CREATE TABLE COSMETICS
(
	COSMETIC_ID			SERIAL PRIMARY KEY,
	PRICE				INTEGER NOT NULL
);

CREATE TABLE WILDCARDS
(
	WILDCARD_ID			SERIAL PRIMARY KEY,
	PRICE				INTEGER NOT NULL,
	DESCRIPTION			VARCHAR(500) NOT NULL
);

CREATE TABLE ACHIEVEMENTS
(
	ACHIEVEMENT_ID		SERIAL PRIMARY KEY,
	DESCRIPTION			VARCHAR(500) NOT NULL
);

CREATE TABLE USERS
(
	NICKNAME			VARCHAR(20) PRIMARY KEY,
	EMAIL				VARCHAR(50) NOT NULL,
	PASSWORD			CHAR(64) NOT NULL,
	WALLET				INTEGER DEFAULT 300 NOT NULL,
	PUBLIC_WINS			INTEGER DEFAULT 0 NOT NULL,
	PRIVATE_WINS		INTEGER DEFAULT 0 NOT NULL,
	ACTUAL_COSMETIC		INTEGER DEFAULT 1 NOT NULL,
	FOREIGN KEY (ACTUAL_COSMETIC) REFERENCES COSMETICS(COSMETIC_ID) ON DELETE CASCADE
);

CREATE TABLE CATEGORIES
(
    CATEGORY_NAME   VARCHAR(15) PRIMARY KEY
);

CREATE TABLE QUESTIONS
(
    QUESTION_ID          SERIAL PRIMARY KEY,
    CATEGORY_NAME        VARCHAR(15)    NOT NULL,
    QUESTION             VARCHAR(200)   NOT NULL,
    CORRECT_ANSWER       VARCHAR(50)    NOT NULL,
    WRONG_ANSWER_1   	 VARCHAR(50)    NOT NULL,
    WRONG_ANSWER_2   	 VARCHAR(50)    NOT NULL,
    WRONG_ANSWER_3   	 VARCHAR(50)    NOT NULL,
	ACCEPTED			 BOOLEAN		NOT NULL,
	NICKNAME			 VARCHAR(20),
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME),
    FOREIGN KEY (CATEGORY_NAME) REFERENCES CATEGORIES(CATEGORY_NAME) ON DELETE CASCADE
);

CREATE TABLE USER_COSMETICS
(
	COSMETIC_ID 		INTEGER,
	NICKNAME			VARCHAR(20),
	FOREIGN KEY (COSMETIC_ID) REFERENCES COSMETICS(COSMETIC_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (COSMETIC_ID, NICKNAME)
);

CREATE TABLE USER_WILDCARDS
(
	WILDCARD_ID 		INTEGER,
	NICKNAME				VARCHAR(20),
	CUANTITY			INTEGER DEFAULT 3 NOT NULL,
	FOREIGN KEY (WILDCARD_ID) REFERENCES WILDCARDS(WILDCARD_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (WILDCARD_ID, NICKNAME)
);

CREATE TABLE USER_ACHIEVEMENTS
(
	ACHIEVEMENT_ID 		INTEGER,
	NICKNAME				VARCHAR(20),
	FOREIGN KEY (ACHIEVEMENT_ID) REFERENCES ACHIEVEMENTS(ACHIEVEMENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (ACHIEVEMENT_ID, NICKNAME)
);

CREATE TABLE FRIENDS
(
	NICKNAME_1 			VARCHAR(20),
	NICKNAME_2			VARCHAR(20),
	FOREIGN KEY (NICKNAME_1) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME_2) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (NICKNAME_1, NICKNAME_2) 
);

CREATE TABLE INDIVIDUAL_GAME
(
	GAME_ID					SERIAL PRIMARY KEY,
	FINISHED				BOOLEAN DEFAULT FALSE NOT NULL,
	DIFFICULTY				VARCHAR(6) NOT NULL,
	CORRECT_ANSWERS			INTEGER DEFAULT 0 NOT NULL,
	TOTAL_ANSWERS			INTEGER DEFAULT 0 NOT NULL,
	ART_ENABLE				BOOLEAN DEFAULT TRUE,
	GEOGRAPHY_ENABLE		BOOLEAN DEFAULT TRUE,
	HISTORY_ENABLE			BOOLEAN DEFAULT TRUE, 
	SPORTS_ENABLE			BOOLEAN DEFAULT TRUE,
	ENTERTAINMENT_ENABLE 	BOOLEAN DEFAULT TRUE,
	SCIENCE_ENABLE			BOOLEAN DEFAULT TRUE,
	NICKNAME				VARCHAR(20),
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE
);

CREATE TABLE PUBLIC_GAME
(
	GAME_ID				SERIAL PRIMARY KEY,
	FINISHED			BOOLEAN DEFAULT FALSE NOT NULL,
	WINNER				VARCHAR(20),
	FOREIGN KEY (WINNER) REFERENCES USERS(NICKNAME) ON DELETE CASCADE
);

CREATE TABLE USER_PUBLIC_GAMES
(
	GAME_ID				INTEGER,
	NICKNAME			VARCHAR(20),
	CORRECT_ANSWERS		INTEGER DEFAULT 0 NOT NULL,
	TOTAL_ANSWERS		INTEGER DEFAULT 0 NOT NULL,
	FOREIGN KEY (GAME_ID) REFERENCES PUBLIC_GAME(GAME_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (GAME_ID, NICKNAME)
);

CREATE TABLE PUBLIC_GAMES_STATE
(
	GAME_ID				INTEGER,
	NICKNAME			VARCHAR(20),
	POSITION			INTEGER DEFAULT 0 NOT NULL,
	SPORTS_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	SCIENCE_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	ENTERTAINMENT_TOKEN	BOOLEAN DEFAULT FALSE NOT NULL,
	HISTORY_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	ART_TOKEN			BOOLEAN DEFAULT FALSE NOT NULL,
	GEOGRAPHY_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	FOREIGN KEY (GAME_ID) REFERENCES PUBLIC_GAME(GAME_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (GAME_ID, NICKNAME)
);

CREATE TABLE PRIVATE_GAME
(
	GAME_ID				SERIAL PRIMARY KEY,
	FINISHED			BOOLEAN DEFAULT FALSE NOT NULL,
	WINNER				VARCHAR(20),
	WILDCARDS_ENABLE	BOOLEAN DEFAULT TRUE NOT NULL,
	ANSWER_TIME			INTEGER DEFAULT 15 NOT NULL,
	ACCESS_KEY			INTEGER NOT NULL,
	FOREIGN KEY (WINNER) REFERENCES USERS(NICKNAME) ON DELETE CASCADE
);

CREATE TABLE USER_PRIVATE_GAMES
(
	GAME_ID				INTEGER,
	NICKNAME			VARCHAR(20),
	CORRECT_ANSWERS		INTEGER DEFAULT 0 NOT NULL,
	TOTAL_ANSWERS		INTEGER DEFAULT 0 NOT NULL,
	FOREIGN KEY (GAME_ID) REFERENCES PRIVATE_GAME(GAME_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (GAME_ID, NICKNAME)
);

CREATE TABLE PRIVATE_GAMES_STATE
(
	GAME_ID				INTEGER,
	NICKNAME			VARCHAR(20),
	POSITION			INTEGER DEFAULT 0 NOT NULL,
	SPORTS_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	SCIENCE_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	ENTERTAINMENT_TOKEN	BOOLEAN DEFAULT FALSE NOT NULL,
	HISTORY_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	ART_TOKEN			BOOLEAN DEFAULT FALSE NOT NULL,
	GEOGRAPHY_TOKEN		BOOLEAN DEFAULT FALSE NOT NULL,
	FOREIGN KEY (GAME_ID) REFERENCES PRIVATE_GAME(GAME_ID) ON DELETE CASCADE,
	FOREIGN KEY (NICKNAME) REFERENCES USERS(NICKNAME) ON DELETE CASCADE,
	PRIMARY KEY (GAME_ID, NICKNAME)
);

CREATE OR REPLACE FUNCTION duplicate_friends() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $duplicate_friends$
DECLARE
	Cuenta INTEGER;
BEGIN

	SELECT count(*) INTO Cuenta FROM FRIENDS WHERE NICKNAME_1 = NEW.NICKNAME_2 AND NICKNAME_2 = NEW.NICKNAME_1;

	IF Cuenta > 0
	THEN
		RAISE EXCEPTION '% Ya se ha representado que dichos usuarios son amigos', 1;
	END IF;

	RETURN NEW;
END $duplicate_friends$;

CREATE TRIGGER duplicate_friends
BEFORE INSERT ON FRIENDS
FOR EACH ROW
EXECUTE PROCEDURE duplicate_friends();

CREATE OR REPLACE FUNCTION  winner_public() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $winner_public$
DECLARE 
	WALLET_WINNER INTEGER;
BEGIN
	IF NEW.FINISHED = TRUE
	THEN

		DELETE FROM PRIVATE_GAMES_STATE WHERE GAME_ID = NEW.GAME_ID;

		SELECT WALLET INTO WALLET_WINNER FROM USERS WHERE NICKNAME = NEW.WINNER;
		WALLET_WINNER = WALLET_WINNER + 50;
		UPDATE USERS SET WALLET = WALLET_WINNER WHERE NICKNAME = NEW.WINNER;
	END IF;
	RETURN NEW;
END;$winner_public$;

CREATE TRIGGER winner_public_game
BEFORE UPDATE ON PUBLIC_GAME
FOR EACH ROW
EXECUTE PROCEDURE winner_public();


CREATE OR REPLACE FUNCTION  winner_private() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $winner_private$
BEGIN
	IF NEW.FINISHED = TRUE
	THEN

		DELETE FROM PRIVATE_GAMES_STATE WHERE GAME_ID = NEW.GAME_ID;

	END IF;
	RETURN NEW;
END;$winner_private$;


CREATE TRIGGER winner_private_game
BEFORE UPDATE ON PRIVATE_GAME
FOR EACH ROW
EXECUTE PROCEDURE winner_private();


CREATE OR REPLACE FUNCTION max_users_public() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $max_users_public$
DECLARE
	Cuenta INTEGER;
BEGIN
	SELECT count(*) INTO Cuenta FROM USER_PUBLIC_GAMES WHERE GAME_ID = NEW.GAME_ID;

	IF Cuenta = 6
	THEN 
		RAISE EXCEPTION '% La partida no admite mas de 6 jugadores', Cuenta;
	END IF;
	RETURN NEW;
END;$max_users_public$;

CREATE OR REPLACE FUNCTION max_users_private() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $max_users_private$
DECLARE
	Cuenta INTEGER;
BEGIN
	SELECT count(*) INTO Cuenta FROM USER_PRIVATE_GAMES WHERE GAME_ID = NEW.GAME_ID;

	IF Cuenta = 6
	THEN 
		RAISE EXCEPTION '% La partida no admite mas de 6 jugadores', Cuenta;
	END IF;
	RETURN NEW;
END;$max_users_private$;

CREATE TRIGGER max_users_in_a_public_game
BEFORE INSERT ON USER_PUBLIC_GAMES
FOR EACH ROW
EXECUTE PROCEDURE max_users_public();


CREATE TRIGGER max_users_in_a_private_game
BEFORE INSERT ON USER_PRIVATE_GAMES
FOR EACH ROW
EXECUTE PROCEDURE max_users_private();


CREATE OR REPLACE FUNCTION  question_bonification() RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $question_bonification$
DECLARE
	WALLET_USER INTEGER;
BEGIN
	IF NEW.ACCEPTED = TRUE
	THEN

		SELECT WALLET INTO WALLET_USER FROM USERS WHERE NICKNAME = NEW.NICKNAME;
		WALLET_USER = WALLET_USER + 10;
		UPDATE USERS SET WALLET = WALLET_USER WHERE NICKNAME = NEW.NICKNAME;

	END IF;
	RETURN NEW;
END;$question_bonification$;

CREATE TRIGGER question_accepted
BEFORE UPDATE ON QUESTIONS
FOR EACH ROW
EXECUTE PROCEDURE question_bonification();